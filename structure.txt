Опис структури проєкту
=======================

Корінь проєкту (kursova/)
-------------------------
- backend/ — серверна частина (Node.js, Express, MongoDB)
- frontend/ — клієнтська частина (HTML, CSS, JS, React)
- package.json, package-lock.json — загальні залежності (можливо для монорепозиторію)


Папка backend/
--------------
Основні файли:
- app.js — головний файл запуску бекенду, ініціалізує сервер, підключає роутери.
- package.json, package-lock.json — описують залежності та скрипти для бекенду.

Папки:
- models/
  - models.js — містить схеми/моделі для роботи з базою даних (MongoDB).
- routes/
  - appointments.js — роутер для записів (appointments).
  - barbers.js — роутер для барберів.
  - users.js — роутер для користувачів.
  - auth.js — роутер для аутентифікації.
  - index.js — ймовірно, збирає всі роутери разом.
  - services.js — роутер для послуг.
  - ranks.js — роутер для рангів/рейтингів.

Зв'язки:
- app.js підключає всі роутери з routes/.
- Роутери використовують моделі з models/models.js для взаємодії з БД.


Папка frontend/
---------------
Основні файли:
- package.json, package-lock.json — залежності для фронтенду (React, бібліотеки).
- README.md — документація.
- .gitignore — ігнорування файлів для git.

Папки:
- public/
  - HTML-файли: index.html, admin.html, auth.html, barbers.html, services.html, contacts.html, booking.html, user-bookings.html — сторінки для різних розділів сайту.
  - CSS: style.css, admin.css — основні стилі для сторінок.
  - JS: header-auth.js, footer-auth.js, booking-auth.js — скрипти для динаміки сторінок.
  - manifest.json — для PWA/іконок.
  - img/ — зображення (барбери, логотипи).
  - js/ — додаткові скрипти (admin.js, auth.js).
  - styles/ — додаткові стилі (auth.css).
- src/
  - App.js, App.css, index.js, index.css — основні файли React-додатку.

Зв'язки:
- HTML-файли підключають відповідні CSS та JS для відображення і функціоналу.
- Папка src/ містить React-компоненти, які можуть бути зібрані у SPA або використовуватись для окремих сторінок.
- Зображення з img/ використовуються на сторінках.
- JS-файли з js/ та окремі скрипти (header-auth.js, тощо) додають інтерактивність.


Взаємозв'язок між backend і frontend
------------------------------------
- Frontend надсилає HTTP-запити (наприклад, через fetch/AJAX) до backend (Express-сервер), використовуючи API, які описані у файлах з backend/routes/.
- Backend обробляє ці запити, працює з базою даних через моделі з models/, і повертає дані на фронтенд.
- Frontend відображає отримані дані користувачу, дозволяє бронювати, реєструватися, переглядати барберів, тощо.


Висновок
--------
- backend/ — логіка, API, робота з БД.
- frontend/ — інтерфейс, сторінки, стилі, інтерактивність.
- Всі частини взаємодіють через HTTP-запити до API. 